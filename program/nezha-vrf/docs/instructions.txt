Notation: [Actor] Instruction
See actors.txt for details on the actors.

Initialization Instructions
===========================

[SuperAdmin] Init:
	Create the Token accounts for:
		- DepositVault
		- PendingDepositVault
		- TreasuryVault
		- InsuranceVault
		- Tier1/Tier2/Tier3 Prize Vaults

	Create LatestEpoch account.
	LatestEpoch.index = 0
	LatestEpoch.state = ENDED

	// These will be later used to authorize super admin, admin and investor for
	// their allowed instructions.
	LatestEpoch.pubkeys = {
		super_admin,
		admin,
		investor
	}

[Admin] FranciumInit:
	Initialize the accounts needed by the Francium protocol.

State Transition Instructions
=============================

See epoch_states.txt for available states and their meaning.

[Admin] CreateEpoch:
	LatestEpoch.index += 1
	Create new Epoch account with index=LatestEpoch.index

	state = CREATED

[Admin] YieldWithdrawByInvestor {tickets_info} / [Admin] FranciumInvest {tickets_info}:
	Epoch.total_invested = DepositVault.amount
	Epoch.tickets_info = tickets_info
		This contains number of tickets, URL of the tickets and hash of the
		tickets, so that the tickets can't be modified later.

	Transfer the contents of Deposit Vault to Investor's USDC ATA or into the Francium protocol.

	state = YIELDING

[Investor] YieldDepositByInvestor / [Admin] FranciumWithdrawInvestment:
	Move funds from Investor's USDC ATA or the Francium protocol back into our program.

	If return < deposit:
		Move all of the returns into DepositVault
		cumulative_return_rate *= return/deposit
		Epoch.draw_enabled = false

	Else, If there is enough money to pay jackpot insurer:
		Epoch.draw_enabled = true

		Move insurance amount into InsuranceVault.
		Move deposited amount into DepositVault.
		Move remaining amount into:
			TreasuryVault, Tier2PrizeVault, Tier3PrizeVault as per configured ratio.

	`Epoch.draw_enabled` will be used by the off-chain code to decide whether to
	publish a winning combination.
	Because we don't want to run the draw when there is not enough money to pay
	the jackpot insurer.
	
	state = FINALISING

[Admin] DeclareEpochWinningCombination:
	Epoch.winning_combination = combination
	state = FINALISING

[Admin] CreateEpochWinnersMeta:
	Upload metadata of winners

[Admin] PublishEpochWinnersPage:
	Upload list of winners page by page.
	If this is the last page, mark upload as complete in the EpochWinnersMeta account.
	Epoch.state = ENDED

Other Instructions
==================

[User] RequestStakeUpdate:
	Create a StakeUpdateRequest { amount } account.

	if amount < 0, it's considered a withdraw request.
	Else it's a deposit request.

	This request -> approve flow is there for anti money laundering (AML) checks.

[Admin] ApproveStakeUpdate:
	Mark StakeUpdate as AML check completed.

[Admin] CompleteStakeUpdate:
	Wait until funds are no longer locked in francium. ie, the Epoch is back to the Running state.

	if deposit:
		Move requested amount from PendingDepositVault into DepositVault
	if withdraw:
		Move requested amount from DepositVault into User's USDC ATA
		If requested amount is more than the available balance, move all the available balance.

[User|Admin] CancelStakeUpdate:
	if the stake update was a deposit:
		Move the amount from PendingDepositVault into User's USDC ATA.
	Delete the StakeUpdate account

[User] ClaimWinning { page, index }:
	Mark the winner entry as claimed.
	Move the prize amount from the prize vault to deposit vault and update user's stake account.

[Admin] FundJackpot:
	prize_amount = EpochTierWinners(tier=1,epoch_index=current).amount
	Move prize_amount from Admin's USDC ATA -> Tier1PrizeVault.
	EpochTierWinners(tier, epoch_index).claimable = true

[Admin] WithdrawVault:
	vault = Treasury or Insurance
	
	Move `amount` from `vault` into Admin's USDC ATA.

[Admin] RotateKey { key_type, value }:
	Change the authorized key of any of SuperAdmin, Admin, Investor.
	This is updated as LatestEpoch.pubkeys.<key_type> = value
